24/5
1.Task:
Consider a list (List = []]. You can perform the following commands:
1. insert i e: Insert integer e at position s.
2. print: Print the list.
3. remove e: Delete the first occurrence of integer e.
4. append e: Insert integer e at the end of the list.
5. sort: Sort the list.

6. pop: Pop the last element from the list.
7. reverse: Reverse the list.

Initialize your list and read in the value of n followed by n lines of commands where each command will be of the 7 types listed above. Iterate through each command in order and
perform the corresponding operation on your list.

Example
N-4

append 1
append 2
insezt 1 3

print
. append 1: Append 1 to the list, ar7 = [1].
. append 2: Append 2 to the list, ar? [1,2].
. insert 1 3: Insert 3 alt index 1, grr [1, 3, 2].
. print: Print the array.
Oulput:

[1, 3, 2]

Input Format

The first line contains an integer, n, denoting the number of commands.
Each line { of the n subsequent lines contains one of the commands described above.

Constraints

. The elements added to the list must be integers.

Output Format

For each command of type print, print the list on a new line.

Sample Input O

12

insert 0 5
insert 110
insert 0 6
print
remove 6
append 9
append l
sort
print
pop
reverse
print

Sample Output O

[6, 5, 10]
[, 5, 9, 10]
[9,5, 0]

********************************************************************************************************
<b>Program:</b>
*****************

if __name__ == '__main__':
    N = int(input())
    n = []
    
    for r in range(N):
        cmd = input().split()
        
        if cmd[0] == "insert":
            n.insert(int(cmd[1]), int(cmd[2]))
        elif cmd[0] == "print":
            print(n)
        elif cmd[0] == "remove":
            n.remove(int(cmd[1]))
        elif cmd[0] == "append":
            n.append(int(cmd[1]))
        elif cmd[0] == "sort":
            n.sort()
        elif cmd[0] == "pop":
            n.pop()
        elif cmd[0] == "reverse":
            n.reverse()


****************************************************************************************************************
Output
***********
Your Output (stdout)
[6, 5, 10]
[1, 5, 9, 10]
[9, 5, 1]
****************************************************************************************************************


28/5
2.TASK - LIST COMPREHENSION
Let's learn about list comprehensions! You are given three integers x, y and z representing the dimensions of a cuboid along with an integer n. Print a list of all possible coordinates
given by (i, j, k) on a 3D grid where the sum of i + j + k is not equal to n. Here, 0 ≤ i ≤ x;  0 ≤ j ≤y; 0 ≤ k ≤ z. Please use list comprehensions rather than multiple loops, as a
learning exercise.

Example

x=1

y=1

z=2

n=3

All permutations of [i, j, k] are:
[[0,0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [0, 1, 2], [1, 0, 0], [1, 0, 1], [1, 0,2], [1, 1, 0], [1, 1, 1], [1, 1, 2]].
Print an array of the elements that do not sum to n = 3.
[[0,0, 0], [0, 0, 1], [0, 0, 2], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 2]]

Input Format

Four integers x, y, z and n, each on a separate line.

Constraints

Print the list in lexicographic increasing order.

Sample Input O

2

Sample Output O

IO. 0, 0], [0, 0, 1, [0, 1, 0], [1, 0, 0], [1, 1, 1]]

Explanation 0

Each variable x, y and z will have values of 0 or 1. All permutations of lists in the form [i, j, k] = [[0, 0, 0], [0, 0, 1], [0, 1, 0], [0, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 0], [1, 1, 1]].
Remove all arrays that sum to n = 2 to leave only the valid permutations.

Sample Input 1

2
2
2
2

Sample Output 1

([O, 0, 0]. [0, 0, 1]. [0, 1, 0], [0, 1, 2], [O, 2, 1]. [0, 2, 2], [1, O, O], [1, 0, 2]. [1, 1, 1]. [1, 1, 2]. [1, 2, O], [1, 2, 1], [1, 2, 2], [2, 0, 1], [2, 0, 2], [2, 1, O], [2, 1, 1], [2, 1, 2], [2, 2, O]. [2, 2, 1], [2, 2, 2]]


*****************************************************************************************************
SOLUTION:
if __name__ == '__main__':
   x = int(input())
   y = int(input())
   z = int(input())
   n = int(input())
   
   result = [[i,j,k]
   for i in range(x + 1)
   for j in range(y + 1)
   for k in range(z + 1)
   if i + j + k != n]
print(result)



OUTPUT
Sample Test case 1
Input (stdin)
1
1
1
2
Your Output (stdout)
[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]
Expected Output
[[0, 0, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]]
