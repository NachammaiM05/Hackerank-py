25/5
TASK:
1. itertools.product()

This tool computes the cartesian product of input iterables.
It is equivalent to nested for-loops.
For example, product(A, B) returns the same as ((x,y) for x in A for y in B).

Sample Code

>>> from itertools import product
>>>
>>> print list(product([1,2,3],repeat = 2))
[(1, 1), (1, 2), (1, 3), (2, 1), (2, 2), (2, 3), (3, 1), (3, 2), (3, 3)]
>>>
>>> print list(product([1,2,3],[3,4]))
[(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]
>>>
>>> A = [[1,2,3],[3,4,5]]
>>> print list(product(*A))
[(1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 3), (3, 4), (3, 5)]
>>>
>>> B = [[1,2,3],[3,4,5],[7,8]]
>>> print list(product(*B))
[(1, 3, 7), (1, 3, 8), (1, 4, 7), (1, 4, 8), (1, 5, 7), (1, 5, 8), (2, 3, 7), (2, 3, 8), (2, 4, 7), (2, 4, 8), (2, 5, 7), (2, 5, 8), (3, 3, 7), (3, 3, 8), (3, 4, 7), (3, 4, 8), (3, 5, 7), (3, 5, 8)]
Task

You are given a two lists A and B. Your task is to compute their cartesian product A X B.

Example

A = [1, 2]
B = [3, 4]

A x B = [(1, 3), (1, 4), (2, 3), (2, 4)]
Note: A and B are sorted lists, and the cartesian product's tuples should be output in sorted order.

Input Format
*************
The first line contains the space separated elements of list A.
The second line contains the space separated elements of list B.

Both lists have no duplicate integer elements.

Constraints
0<A<30
0<B<30


Output Format

Output the space separated tuples of the cartesian product.

Sample Input

 1 2
 3 4
Sample Output

 (1, 3) (1, 4) (2, 3) (2, 4)
*************************************************************************************************************************************************************************************
SOLUTION:
from itertools import product
A = [1, 2]
B = [3, 4]
print(*product(A, B))

***************************************************************************************************************************************************************************************

OUTPUT
Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
1 2
3 4
Your Output (stdout)
(1, 3) (1, 4) (2, 3) (2, 4)
Expected Output
(1, 3) (1, 4) (2, 3) (2, 4)
*****************************************************************************************
*****************************************************************************************


26/5
TASK
2. itertools.permutations(iterable[, r])

This tool returns successive r length permutations of elements in an iterable.
If r is not specified or is None, then r defaults to the length of the iterable, and all possible full length permutations are generated.
Permutations are printed in a lexicographic sorted order. So, if the input iterable is sorted, the permutation tuples will be produced in a sorted order.

Sample Code

>>> from itertools import permutations
>>> print permutations(['1",'2",'3"])
<itertools.permutations object at 0x02A45210>

>>> print list(permutations(['1','2','3']))
[('1', '2', '3'), ('1', '3', '2'), ('2", '1', '3"), ('2', '3', '1'), ('3', '1', '2"), ('3', '2', '1')]
>>> print list(permutations(['1','2','3'],2))
[('1', '2'), ('1', '3'), ('2', '1'), ('2', '3'), ('3', '1'), ('3', '2')]

>>> print list(permutations('abe',3))
[('a', 'b', 'c'), ('a', 'e', 'b'), ('b', 'a', 'c'), ('b', 'e', 'a'), ('c', 'a', 'b'), ('e', 'b', 'a')]

Task

You are given a string S.
Your task is to print all possible permutations of size k of the string in lexicographic sorted order.

Input Format

A single line containing the space separated string S and the integer value k.

Constraints
0 < k <= len(S)
The string contains only UPPERCASE characters.

Output Format

Print the permuations of the string S on separate lines.

Sample Input

HACK 2

Sample Output

AC
AH
AK
CA
CH
CK
HA
HC
HK
KA
KC
KH

Explanation

All possible size 2 permutations of the string "HACK" are printed in lexicographic sorted order.
**********************************************************************************************************************************************
SOLUTION:
from itertools import permutations() 
 
 def print_permutations():
    s, k = input().split()
    k = int(k)

    sorted_s = sorted(s)

    prem_list = permutations(sorted_s, k)
    for prem in  prem_list:
        print(''.join(prem))
 
 print_permutations()

******************************************************************************************************************
OUTPUT
*********************************************************
Congratulations!

You have passed the sample test cases. Click the submit button to run your code against all the test cases.


Sample Test case 0
Input (stdin)
HACK 2
Your Output (stdout)
AC
AH
AK
CA
CH
CK
HA
HC
HK
KA
KC
KH
Expected Output
AC
AH
AK
CA
CH
CK
HA
HC
HK
KA
KC
KH
